# in the subclasses only args can be defined that are also 
# specified as args in the respective classes passed in to the
# LightningCLI_Custom. (for the trainer by default: class Trainer)
seed_everything: 123
# TEMP: data config alternative
# datamodule_class: data.CIFAR10DataModuleDP
trainer:
  # simply replace everything with a bool 'true' to use TensorBoard
  logger: 
    class_path: pytorch_lightning.loggers.WandbLogger
    # NOTE: commented out for sweep
    init_args:
      project: 'baseline'
      # TODO: automate this 
      name: 'densenet121_imagenette'
      # NOTE: Log checkpoints created by ModelCheckpoint as W&B artifacts. 
      # log_model: true
  checkpoint_callback: true
  callbacks: 
    # NOTE: to save so that wandb doesn't sync (only syncs what's in the same folder)
    # for now saving at all turn 'checkpoint_callback: false' (above)
    - class_path: pytorch_lightning.callbacks.ModelCheckpoint
      init_args:
        monitor: 'val_acc'
        dirpath: '/home/nico/mt/dp_benchmark/model_checkpoint_dump'
    - class_path: pytorch_lightning.callbacks.EarlyStopping
      init_args:
        monitor: 'val_loss'
        patience: 15
        mode: 'min'
        divergence_threshold: 1000.0 
    # NOTE: too "slow" -- only stops after 1 epoch and there are just the central 
    # training configs "check_val_every_n_epoch" and "val_check_interval" that would
    # apply to validation checks (we don't want to validate after every step).
    # - class_path: pytorch_lightning.callbacks.EarlyStopping
    #   init_args:
    #     divergence_threshold: 10.0
    #     monitor: 'spent_epsilon'

    # NOTE: comment this out if lr_scheduler is set to False    
    - class_path: pytorch_lightning.callbacks.LearningRateMonitor
      init_args:
        logging_interval: 'step'
  default_root_dir: null
  gradient_clip_val: 0.0  
  gradient_clip_algorithm: norm
  process_position: 0
  num_nodes: 1
  num_processes: 1
  gpus: 1
  auto_select_gpus: false
  tpu_cores: null
  log_gpu_memory: null
  progress_bar_refresh_rate: null
  overfit_batches: 0.0
  track_grad_norm: -1 # 2 for tracking p2 norm
  check_val_every_n_epoch: 1
  fast_dev_run: false
  accumulate_grad_batches: 1
  max_epochs: 30
  min_epochs: null
  max_steps: null
  min_steps: null
  max_time: null
  limit_train_batches: 1.0
  limit_val_batches: 1.0
  limit_test_batches: 1.0
  limit_predict_batches: 1.0
  val_check_interval: 1.0
  flush_logs_every_n_steps: 100
  log_every_n_steps: 50
  accelerator: null
  sync_batchnorm: false
  precision: 32
  weights_summary: top
  weights_save_path: null
  num_sanity_val_steps: 2
  truncated_bptt_steps: null
  resume_from_checkpoint: null
  profiler: null
  benchmark: false
  deterministic: true
  reload_dataloaders_every_epoch: false
  auto_lr_find: false
  replace_sampler_ddp: true
  terminate_on_nan: false
  auto_scale_batch_size: false
  prepare_data_per_node: true
  plugins: null
  amp_backend: native
  amp_level: O2
  distributed_backend: null
  move_metrics_to_cpu: false
  multiple_trainloader_mode: max_size_cycle
  stochastic_weight_avg: false
model:
##### CHECKLIST FOR CHANGE #####
  # 1. Model Name (here)
  # 2. Model Surgeon (here)
  # 3. Data Name Change (here)
  # 4. Change Data in trainer.py
  # 5. Change name of project
################################
  including_test: true
  # possible models: see model.py
    # resnet18, vgg11(_bn), inception_v4, densenet121, densenet201, wide_resnet50_2,
    # condense_net_v1, mobilenetv1_w1, mobilenetv1_w025, mobilenetv1_w050, mobilenetv1_w075
    # mobilenetv3_large_100, mobilenet_v3_small, vit_base_patch16_224,
    # simple_conv, stage_conv, en_scaling_base_model, en_scaling_residual_model, 
    # googlenet, xception, efficientnet_b[0-7]
    # any other model is tried to be created from the timm library
  model_name: 'resnet18'
  pretrained: False
  weight_init: False # xavier_uniform (init for selu at the moment!)
  weight_norm: False
  # for SimpleConvNet and DepthConvNet
  kernel_size: 3
  conv_layers: [16, 32]
  # for stage_conv
  nr_stages: 1
  # for en_scaling_residual_model
  halve_dim: True
  # possible choices: see utils.py
    # norms: batch_norm, group_norm, instance_norm, layer_norm
    # pooling: max_pool, avg_pool
    # combination: mxp_gn, mxp_ln
    # nothing: identity
  after_conv_fc_str: 'mxp_gn'
  # possible choices: see utils.py
  # selu, relu, leaky_relu
  activation_fc_str: 'selu'
  skip_depth: 2
  # for en_scaling_*
  depth: 1.0
  width: 8.0
  # depthwise seperable convolutions
  dsc: False
  # for dense components
  # skip_depth and halve_dim will be ignored
  # width ~ growing factor
  # depth = num of Conv-AfterConvFc-Activation triples per DenseBlock
  dense: False
  data_name: 'imagenette'
  # possible optims: sgd, adam
  optimizer: 'sgd'
  opt_kwargs: 
    lr: 0.05
    # optional
    #momentum: 0.9
    #weight_decay: 0.0002
  lr_scheduler: true
  batch_size: 32
  virtual_batch_size: 32 # not using at the moment
  # DP params
  # under model because I didn't want to overwrite the trainer class 
  # to include these arguments. I can access the params via the model 
  # attribute in the trainer class.
  dp_tool: "opacus"
  # NOTE: this is only relevant for the deepee DP tool
  # possible surgeries: see surgery.py
  # NOTE: comment out if not needed
  # model_surgeon: 
  #   class_path: deepee.ModelSurgeon
  #   init_args:
  #     converter: utils.BN_to_GN
  # TODO: with dp_tool this is probably not necessary anymore
  dp: true
  # NOTE: std of 0.1 yields good performance, >=0.2 not so good. vgg11 cifar10
  L2_clip: 9.972 # ~Â 50% of stationary value (assuming convergence in baseline training)
  #noise_multiplier: 0.4272 # resnet: 0.5216, small_deep_conv: 0.438
  target_epsilon: 10.0
  abort: true
  target_delta: 1e-5
  fallback_to_rdp: false
data:
  # possible datasets: cifar10, fashion_mnist, imagenet, mnist, imagenette
  # name: 'cifar10' 
  # dp: true
  data_dir: './data'
  val_split: 0.2
  num_workers: 16
  normalize: true
  seed: 42
  shuffle: false
  pin_memory: false
  drop_last: false
  train_transforms: null
  val_transforms: null
  test_transforms: null
  dims: null