# NOTE: here all the params that are dynamically fixed in sweep have to be commented out,
# so that they don't appear twice. 

# STATUS
# - error likely comes from the fact that no datamodule can be created with the new config
# - finish putting the data_name or the datamodule_class (what I'm currently trying) in the configs
# - resnet on mnsit with deepee (no noise) works like a charm, but vgg not at all |Â resnet on cifar10 not really

# in the subclasses only args can be defined that are also 
# specified as args in the respective classes passed in to the
# LightningCLI_Custom. (for the trainer by default: class Trainer)
seed_everything: 123
# TEMP: data config alternative
# datamodule_class: data.CIFAR10DataModuleDP
trainer:
  # simply replace everything with a bool 'true' to use TensorBoard
  logger: 
    class_path: pytorch_lightning.loggers.WandbLogger
    # NOTE: commented out for sweep
    # init_args:
    #   project: 'dp_benchmark'
    #   # TODO: automate this 
    #   name: 'vgg11_cifar10_dp'
      # NOTE: Log checkpoints created by ModelCheckpoint as W&B artifacts. 
      # log_model: true
  checkpoint_callback: true
  callbacks: 
    - class_path: pytorch_lightning.callbacks.ModelCheckpoint
      init_args:
        monitor: 'val_loss'
        # set explicitly so that the wandb logger doesn't save the checkpoints
        # remove if checkpoints should also be saved. 
        dirpath: '/home/nico/mt/dp_benchmark/model_checkpoint_dump'
    - class_path: pytorch_lightning.callbacks.EarlyStopping
      init_args:
        monitor: 'val_loss'
        patience: 15
        divergence_threshold: 1000.0 
    # NOTE: too "slow" -- only stops after 1 epoch and there are just the central 
    # training configs "check_val_every_n_epoch" and "val_check_interval" that would
    # apply to validation checks (we don't want to validate after every step).
    # - class_path: pytorch_lightning.callbacks.EarlyStopping
    #   init_args:
    #     divergence_threshold: 10.0
    #     monitor: 'spent_epsilon'

    # NOTE: comment this out if lr_scheduler is set to False    
    # - class_path: pytorch_lightning.callbacks.LearningRateMonitor
    #   init_args:
    #     logging_interval: 'step'model.opt_kwargs.lr:
  default_root_dir: null
  gradient_clip_val: 0.0
  # TODO: check if this is actually applied!
  gradient_clip_algorithm: norm
  process_position: 0
  num_nodes: 1
  num_processes: 1
  gpus: 1
  auto_select_gpus: false
  tpu_cores: null
  log_gpu_memory: null
  progress_bar_refresh_rate: null
  overfit_batches: 0.0
  track_grad_norm: -1
  check_val_every_n_epoch: 1
  fast_dev_run: false
  accumulate_grad_batches: 1
  max_epochs: 100
  min_epochs: null
  max_steps: null
  min_steps: null
  max_time: null
  limit_train_batches: 1.0
  limit_val_batches: 1.0
  limit_test_batches: 1.0
  limit_predict_batches: 1.0
  val_check_interval: 1.0
  flush_logs_every_n_steps: 100
  log_every_n_steps: 50
  accelerator: null
  sync_batchnorm: false
  precision: 32
  weights_summary: top
  weights_save_path: null
  num_sanity_val_steps: 2
  truncated_bptt_steps: null
  resume_from_checkpoint: null
  profiler: null
  benchmark: false
  deterministic: true
  reload_dataloaders_every_epoch: false
  auto_lr_find: false
  replace_sampler_ddp: true
  terminate_on_nan: false
  auto_scale_batch_size: false
  prepare_data_per_node: true
  plugins: null
  amp_backend: native
  amp_level: O2
  distributed_backend: null
  move_metrics_to_cpu: false
  multiple_trainloader_mode: max_size_cycle
  stochastic_weight_avg: false
model:
  # possible models: see model.py
  # resnet18, vgg11, simple_conv
  model_name: 'vgg11'
  # for SimpleConvNet
  kernel_size: 3
  conv_layers: [16, 32]
  # NOTE: this is only relevant for the deepee DP tool
  # possible surgeries: see surgery.py
  # NOTE: comment out if not needed
  # model_surgeon: 
  #   class_path: deepee.ModelSurgeon
  #   init_args:
  #     converter: utils.BN_to_GN
  data_name: 'cifar10'
  # possible optims: sgd, adam
  optimizer: 'sgd'
  opt_kwargs: 
    lr: 0.05
    # optional
    momentum: 0.0
    weight_decay: 0.0
  lr_scheduler: false
  batch_size: 32
  virtual_batch_size: 0 # not using at the moment
  # DP params
  # under model because I didn't want to overwrite the trainer class 
  # to include these arguments. I can access the params via the model 
  # attribute in the trainer class.
  dp_tool: "opacus"
  # TODO: with dp_tool this is probably not necessary anymore
  dp: true
  # NOTE: std of 0.1 yields good performance, >=0.2 not so good. vgg11 cifar10
  # why doesn't stop after eps>target_epsilon? (patience stops for now -- 50 now)

# TODO: 
  # how to not have twice the same params? 
  # solve problem with checkpoint saving 
  # start a vgg11 sweep based on manual experiments. (mainly to get a feeling about )
  
  # TODO: k=3, channels quadratisch aufbauend. (100K - 5mil mit pytorch summary)

  # do tests to check whether all models work with dp on but no noise (extra project called test -> for every model we do that)
  # go through code and make everything easier -- too many manual adjustments in order to switch from model to model or data to data
  # --> model surgeon was a big problem!!!!!!
  # check whether adaptive cnn works ...
  # TODO: CELoss directly without manual logsoftmax
  # Get vgg11, resnet18, and cnn to decent performance with epsilon under 10

  # ------
  # finish retrainings based using top10 prios from before. redo small reports. 
  # think about strategy to validate conv params: same as DPSGD (three different noises and then we check? 
  #   how do be sure that the performance is because of the model and not the params?)
  # Do uncertainty robustness plots. (check interpretability knowledge page in notion)
  # Clean and complete test page
  # Do exeperiments, READ (how to best tune), experiment, validate, read.

  # NOTE: already set in sweep config
  # L2_clip: 1.677 
  # noise_multiplier: 0.5216 
  target_epsilon: 10.0
  abort: true
  target_delta: 1e-5
  fallback_to_rdp: false
data:
  # possible datasets: cifar10, fashion_mnist, imagenet, mnist
  # name: 'cifar10' 
  # dp: true
  data_dir: './data'
  val_split: 0.2
  num_workers: 16
  normalize: true
  seed: 42
  shuffle: false
  pin_memory: false
  drop_last: false
  train_transforms: null
  val_transforms: null
  test_transforms: null
  dims: null